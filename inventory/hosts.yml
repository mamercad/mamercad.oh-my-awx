all:
  hosts:
    localhost:
      connection: local
      ansible_python_interpreter: "{{ lookup('ansible.builtin.pipe', 'which python3') }}"
    lb1:
      ansible_host: 192.168.1.85
      ansible_user: ubuntu
      ansible_python_interpreter: /usr/bin/python3
    app1:
      ansible_host: 192.168.1.114
      ansible_user: ubuntu
      ansible_python_interpreter: /usr/bin/python3
    db1:
      ansible_host: 192.168.1.102
      ansible_user: ubuntu
      ansible_python_interpreter: /usr/bin/python3
  vars:
    versions:
      awx: 13.0.0
      postgres: 10
    deployment_object:
      9.3.0: sts
      10.0.0: sts
      11.2.0: deployment
      13.0.0: deployment
      15.0.1: deployment
      16.0.0: deployment
    task_image:
      9.3.0: ansible/awx_task
      10.0.0: ansible/awx_task
      11.2.0: ansible/awx_task
      13.0.0: ansible/awx
    manifests:
      9.3.0:
        - configmap
        - secret
        - serviceaccount
        - service
        - configmap2
        - role
        - rolebinding
        - statefulset
        - configmap3
        - service2
        - service3
        - ingress
      10.0.0:
        - configmap
        - ingress
        - secret
        - service
        - serviceaccount
        - statefulset
      11.2.0:
        - configmap
        - ingress
        - secret
        - service
        - serviceaccount
        - deployment
        - supervisor
        - launch_awx
      13.0.0:
        - configmap
        - ingress
        - secret
        - service
        - serviceaccount
        - deployment
        - supervisor
        - launch_awx
      15.0.1:
        - configmap
        - secret
        - serviceaccount
        - podsecuritypolicy
        - role
        - deployment
        - service
        - ingress
        - supervisor
        - launch_awx
      16.0.0:
        - configmap
        - secret
        - serviceaccount
        - podsecuritypolicy
        - role
        - deployment
        - service
        - ingress
        - supervisor
        - launch_awx
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    kubernetes_context: default
    # awx 9.3.0
    kubernetes_deployment_name: awx
    kubernetes_namespace: awx
    web_mem_request: 1
    web_cpu_request: 500
    task_mem_request: 1
    task_cpu_request: 1000
    rabbitmq_mem_request: 1
    rabbitmq_cpu_request: 500
    memcached_hostname: localhost
    memcached_mem_request: 1
    memcached_cpu_request: 500
    insights_url_base: "https://example.org"
    automation_analytics_url: "https://example.org"
    insights_agent_mime: "application/example"
    container_groups_image: "ansible/ansible-runner"
    secret_key: hunter2
    rabbitmq_user: 'awx'
    rabbitmq_password: hunter2
    rabbitmq_erlang_cookie: hunter2
    ca_trust_bundle: "/etc/pki/tls/certs/ca-bundle.crt"
    pg_hostname: "{{ hostvars['db1']['ansible_default_ipv4']['address'] }}"
    pg_database: awx
    pg_username: awx
    pg_password: hunter2
    pg_port: 5432
    kubernetes_statefulset_api_version: apps/v1
    kubernetes_task_version: "{{ versions.awx }}"
    kubernetes_task_image: "{{ task_image[versions.awx] }}"
    kubernetes_web_version: "{{ versions.awx }}"
    kubernetes_web_image: ansible/awx_web
    kubernetes_rabbitmq_version: "3.7.21"
    kubernetes_rabbitmq_image: "ansible/awx_rabbitmq"
    kubernetes_memcached_version: "latest"
    kubernetes_memcached_image: "memcached"
    kubectl_or_oc: /snap/bin/kubectl
    management_cpu_limit: 1000
    management_mem_limit: 1
    admin_user: admin
    admin_password: hunter2
    admin_email: admin@example.com
    replicas: 1
    # 15.0.1, 16.0.0
    broadcast_websocket_secret: hunter2
    kubernetes_deployment_api_version: apps/v1
    kubernetes_serviceaccount_name: awx
    kubernetes_deployment_replica_size: 1
    awx_psp_create: false
    awx_psp_name: awx
    awx_psp_privileged: true
    kubernetes_awx_version: "{{ versions.awx }}"
    kubernetes_awx_image: ansible/awx
    kubernetes_web_svc_type: NodePort
    kubernetes_redis_image: "redis"
    kubernetes_redis_image_tag: "latest"
    kubernetes_redis_config_mount_path: "/usr/local/etc/redis/redis.conf"
    redis_mem_request: 1
    redis_cpu_request: 500
    redis_security_context_enabled: true
    redis_security_context_privileged: false
    redis_security_context_user: 1001
    uwsgi_bash: "bash -c"
  children:
    ubuntu:
      hosts:
        app1:
        db1:
    k3s:
      hosts:
        app1:
    postgres:
      hosts:
        db1:
